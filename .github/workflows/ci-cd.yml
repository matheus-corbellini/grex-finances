name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testes e qualidade de c√≥digo
  test-and-quality:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: grex_finances_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        npm ci
    
    - name: Run Backend Linting
      run: |
        cd backend
        npm run lint || true
    
    - name: Run Frontend Linting
      run: |
        npm run lint || true
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm run test:cov || npm run test || true
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/grex_finances_test
        JWT_SECRET: test-jwt-secret
    
    - name: Run Frontend Tests
      run: |
        npm run test || true
    
    - name: Build Backend
      run: |
        cd backend
        npm run build
    
    - name: Build Frontend
      run: |
        npm run build
    
    - name: Upload Backend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        retention-days: 1
    
    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: .next/
        retention-days: 1

  # Job de build e push de imagens Docker
  build-and-push:
    needs: test-and-quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy para Staging
  deploy-staging:
    needs: [test-and-quality, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        
        # Aqui voc√™ adicionaria os comandos espec√≠ficos para deploy no staging
        # Exemplo para AWS ECS, Kubernetes, ou outros servi√ßos
        
        # Para AWS ECS:
        # aws ecs update-service --cluster staging-cluster --service grex-finances-backend --force-new-deployment
        # aws ecs update-service --cluster staging-cluster --service grex-finances-frontend --force-new-deployment
        
        # Para Kubernetes:
        # kubectl set image deployment/grex-finances-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:develop-${{ github.sha }}
        # kubectl set image deployment/grex-finances-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:develop-${{ github.sha }}
        
        echo "‚úÖ Staging deployment completed!"

  # Deploy para Production
  deploy-production:
    needs: [test-and-quality, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        
        # Aqui voc√™ adicionaria os comandos espec√≠ficos para deploy em produ√ß√£o
        # Exemplo para AWS ECS, Kubernetes, ou outros servi√ßos
        
        # Para AWS ECS:
        # aws ecs update-service --cluster production-cluster --service grex-finances-backend --force-new-deployment
        # aws ecs update-service --cluster production-cluster --service grex-finances-frontend --force-new-deployment
        
        # Para Kubernetes:
        # kubectl set image deployment/grex-finances-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:main-${{ github.sha }}
        # kubectl set image deployment/grex-finances-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:main-${{ github.sha }}
        
        echo "‚úÖ Production deployment completed!"
    
    - name: Notify Deployment Success
      if: success()
      run: |
        echo "üì¢ Production deployment successful!"
        # Aqui voc√™ pode adicionar notifica√ß√µes via Slack, Discord, etc.
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"‚úÖ Grex Finances deployed to production successfully!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Deployment Failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"‚ùå Grex Finances production deployment failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
