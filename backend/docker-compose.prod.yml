version: "3.8"

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: grex_finances_production
      POSTGRES_USER: grex_production_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_production_password_change_this}
    volumes:
      - postgres_production_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - grex-production-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U grex_production_user -d grex_finances_production" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Backend API - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: grex_production_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_production_password_change_this}
      DB_NAME: grex_finances_production
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_change_this}
      FRONTEND_URL: ${FRONTEND_URL:-https://grex-finances.com}
      LOG_LEVEL: warn
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-production_redis_password}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grex-production-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend - Production
  frontend:
    build:
      context: ..
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.grex-finances.com}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      - backend
    networks:
      - grex-production-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-production_redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_production_data:/data
    networks:
      - grex-production-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf
      - ./ssl/production:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - grex-production-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service - Production
  backup:
    image: postgres:15
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_production_password_change_this}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - grex-production-network
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    depends_on:
      - postgres

volumes:
  postgres_production_data:
  redis_production_data:


networks:
  grex-production-network:
    driver: bridge
