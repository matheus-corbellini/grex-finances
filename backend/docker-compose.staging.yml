version: "3.8"

services:
  # PostgreSQL Database - Staging
  postgres:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: grex_finances_staging
      POSTGRES_USER: grex_staging_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-staging_password_change_this}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - grex-staging-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U grex_staging_user -d grex_finances_staging" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - Staging
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: staging
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: grex_staging_user
      DB_PASSWORD: ${DB_PASSWORD:-staging_password_change_this}
      DB_NAME: grex_finances_staging
      JWT_SECRET: ${JWT_SECRET:-staging_jwt_secret_change_this}
      FRONTEND_URL: ${FRONTEND_URL:-https://staging.grex-finances.com}
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: staging
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - grex-staging-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Staging
  frontend:
    build:
      context: ..
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api-staging.grex-finances.com}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      - backend
    networks:
      - grex-staging-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Staging
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-staging_redis_password}
    volumes:
      - redis_staging_data:/data
    networks:
      - grex-staging-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy - Staging
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf
      - ./ssl/staging:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - grex-staging-network

volumes:
  postgres_staging_data:
  redis_staging_data:


networks:
  grex-staging-network:
    driver: bridge
